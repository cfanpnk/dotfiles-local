if has('neovim') 
  set inccommand=nosplit
end

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
filetype plugin indent on
set background=dark
set termguicolors
color gruvbox
set textwidth=120
set colorcolumn=
set number relativenumber
set ignorecase
set smartcase
set guifont=Monaco:h16
set hlsearch
set clipboard=unnamed

" Eazy access to the start of the line
nmap 0 ^

" Move up and down by visible lines if current line is wrapped
nmap j gj
nmap k gk

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" zoom a vim pane, <C-w>= to re-balance
nmap <leader>- :wincmd _<cr>:wincmd \|<cr>
nmap <leader>= :wincmd =<cr>
nmap <leader>v- :VtrOpenRunner { "orientation": "v" }<cr>
nmap <leader>v\ :VtrOpenRunner { "orientation": "h" }<cr>
nmap <leader>vk :VtrKillRunner<cr>
nmap <leader>va :VtrAttachToPane<cr>
nmap <leader>fr :VtrFocusRunner<cr>
nmap <leader>sq :VtrSendKeysRaw q<cr>
nmap <leader>sd :VtrSendKeysRaw ^D<cr>
nmap <leader>sl :VtrSendKeysRaw ^L<cr>
nmap <leader>sc :VtrSendKeysRaw ^C<cr>
nmap <leader>vs :VtrSendCommandToRunner<space>
nmap <leader>ss :VtrSendLinesToRunner<cr>
nmap <leader>p :Files<CR>
nmap <leader>h :set hlsearch!<CR>

" leader mapping
nmap <leader>so :source $MYVIMRC<cr>
nmap <leader>vi :tabe ~/.vimrc<cr>
nmap <leader>gr "*gr
imap <leader>jk <esc>
imap <leader>kj <esc>

" Command aliases for typoed commands (accidentally holding shift too long)
command! Q q
command! W w
command! Qall qall
command! QA qall
command! E e"

let g:airline_theme='gruvbox'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" for .hql files
au BufNewFile,BufRead *.hql set filetype=hive expandtab
" " for .q files
au BufNewFile,BufRead *.q set filetype=hive expandtab

" copy current file name (relative/absolute) to system clipboard
if has("mac") || has("gui_macvim") || has("gui_mac")
  " relative path  (src/foo.txt)
  nnoremap <leader>cF :let @*=expand("%")<CR>

  " absolute path  (/something/src/foo.txt)
  nnoremap <leader>cf :let @*=expand("%:p")<CR>

  " filename       (foo.txt)
  nnoremap <leader>ct :let @*=expand("%:t")<CR>

  " directory name (/something/src)
  nnoremap <leader>ch :let @*=expand("%:p:h")<CR>
endif

" Edit or view files in same directory as current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>r :call RenameFile()<cr>

let $FZF_DEFAULT_COMMAND = 'ag --ignore trunk --ignore rel -g ""'
